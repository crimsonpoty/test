/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GDBUS_COREMEDIA_GENERATED_H__
#define __GDBUS_COREMEDIA_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.halkamalka.Coremedia.ObjectManager.SourcePool */

#define COREMEDIA_TYPE_SOURCE_POOL (coremedia_source_pool_get_type ())
#define COREMEDIA_SOURCE_POOL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SOURCE_POOL, CoremediaSourcePool))
#define COREMEDIA_IS_SOURCE_POOL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SOURCE_POOL))
#define COREMEDIA_SOURCE_POOL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), COREMEDIA_TYPE_SOURCE_POOL, CoremediaSourcePoolIface))

struct _CoremediaSourcePool;
typedef struct _CoremediaSourcePool CoremediaSourcePool;
typedef struct _CoremediaSourcePoolIface CoremediaSourcePoolIface;

struct _CoremediaSourcePoolIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_release) (
    CoremediaSourcePool *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_dataSource);

  gboolean (*handle_request) (
    CoremediaSourcePool *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_dataSource);

};

GType coremedia_source_pool_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *coremedia_source_pool_interface_info (void);
guint coremedia_source_pool_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void coremedia_source_pool_complete_request (
    CoremediaSourcePool *object,
    GDBusMethodInvocation *invocation);

void coremedia_source_pool_complete_release (
    CoremediaSourcePool *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void coremedia_source_pool_call_request (
    CoremediaSourcePool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_pool_call_request_finish (
    CoremediaSourcePool *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_pool_call_request_sync (
    CoremediaSourcePool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GError **error);

void coremedia_source_pool_call_release (
    CoremediaSourcePool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_pool_call_release_finish (
    CoremediaSourcePool *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_pool_call_release_sync (
    CoremediaSourcePool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define COREMEDIA_TYPE_SOURCE_POOL_PROXY (coremedia_source_pool_proxy_get_type ())
#define COREMEDIA_SOURCE_POOL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SOURCE_POOL_PROXY, CoremediaSourcePoolProxy))
#define COREMEDIA_SOURCE_POOL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SOURCE_POOL_PROXY, CoremediaSourcePoolProxyClass))
#define COREMEDIA_SOURCE_POOL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SOURCE_POOL_PROXY, CoremediaSourcePoolProxyClass))
#define COREMEDIA_IS_SOURCE_POOL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SOURCE_POOL_PROXY))
#define COREMEDIA_IS_SOURCE_POOL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SOURCE_POOL_PROXY))

typedef struct _CoremediaSourcePoolProxy CoremediaSourcePoolProxy;
typedef struct _CoremediaSourcePoolProxyClass CoremediaSourcePoolProxyClass;
typedef struct _CoremediaSourcePoolProxyPrivate CoremediaSourcePoolProxyPrivate;

struct _CoremediaSourcePoolProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  CoremediaSourcePoolProxyPrivate *priv;
};

struct _CoremediaSourcePoolProxyClass
{
  GDBusProxyClass parent_class;
};

GType coremedia_source_pool_proxy_get_type (void) G_GNUC_CONST;

void coremedia_source_pool_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSourcePool *coremedia_source_pool_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSourcePool *coremedia_source_pool_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void coremedia_source_pool_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSourcePool *coremedia_source_pool_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSourcePool *coremedia_source_pool_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define COREMEDIA_TYPE_SOURCE_POOL_SKELETON (coremedia_source_pool_skeleton_get_type ())
#define COREMEDIA_SOURCE_POOL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SOURCE_POOL_SKELETON, CoremediaSourcePoolSkeleton))
#define COREMEDIA_SOURCE_POOL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SOURCE_POOL_SKELETON, CoremediaSourcePoolSkeletonClass))
#define COREMEDIA_SOURCE_POOL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SOURCE_POOL_SKELETON, CoremediaSourcePoolSkeletonClass))
#define COREMEDIA_IS_SOURCE_POOL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SOURCE_POOL_SKELETON))
#define COREMEDIA_IS_SOURCE_POOL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SOURCE_POOL_SKELETON))

typedef struct _CoremediaSourcePoolSkeleton CoremediaSourcePoolSkeleton;
typedef struct _CoremediaSourcePoolSkeletonClass CoremediaSourcePoolSkeletonClass;
typedef struct _CoremediaSourcePoolSkeletonPrivate CoremediaSourcePoolSkeletonPrivate;

struct _CoremediaSourcePoolSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  CoremediaSourcePoolSkeletonPrivate *priv;
};

struct _CoremediaSourcePoolSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType coremedia_source_pool_skeleton_get_type (void) G_GNUC_CONST;

CoremediaSourcePool *coremedia_source_pool_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.halkamalka.Coremedia.ObjectManager.SinkPool */

#define COREMEDIA_TYPE_SINK_POOL (coremedia_sink_pool_get_type ())
#define COREMEDIA_SINK_POOL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SINK_POOL, CoremediaSinkPool))
#define COREMEDIA_IS_SINK_POOL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SINK_POOL))
#define COREMEDIA_SINK_POOL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), COREMEDIA_TYPE_SINK_POOL, CoremediaSinkPoolIface))

struct _CoremediaSinkPool;
typedef struct _CoremediaSinkPool CoremediaSinkPool;
typedef struct _CoremediaSinkPoolIface CoremediaSinkPoolIface;

struct _CoremediaSinkPoolIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_release) (
    CoremediaSinkPool *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_dataSource);

  gboolean (*handle_request) (
    CoremediaSinkPool *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_dataSource);

};

GType coremedia_sink_pool_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *coremedia_sink_pool_interface_info (void);
guint coremedia_sink_pool_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void coremedia_sink_pool_complete_request (
    CoremediaSinkPool *object,
    GDBusMethodInvocation *invocation);

void coremedia_sink_pool_complete_release (
    CoremediaSinkPool *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void coremedia_sink_pool_call_request (
    CoremediaSinkPool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_sink_pool_call_request_finish (
    CoremediaSinkPool *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_sink_pool_call_request_sync (
    CoremediaSinkPool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GError **error);

void coremedia_sink_pool_call_release (
    CoremediaSinkPool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_sink_pool_call_release_finish (
    CoremediaSinkPool *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_sink_pool_call_release_sync (
    CoremediaSinkPool *proxy,
    const gchar *arg_dataSource,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define COREMEDIA_TYPE_SINK_POOL_PROXY (coremedia_sink_pool_proxy_get_type ())
#define COREMEDIA_SINK_POOL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SINK_POOL_PROXY, CoremediaSinkPoolProxy))
#define COREMEDIA_SINK_POOL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SINK_POOL_PROXY, CoremediaSinkPoolProxyClass))
#define COREMEDIA_SINK_POOL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SINK_POOL_PROXY, CoremediaSinkPoolProxyClass))
#define COREMEDIA_IS_SINK_POOL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SINK_POOL_PROXY))
#define COREMEDIA_IS_SINK_POOL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SINK_POOL_PROXY))

typedef struct _CoremediaSinkPoolProxy CoremediaSinkPoolProxy;
typedef struct _CoremediaSinkPoolProxyClass CoremediaSinkPoolProxyClass;
typedef struct _CoremediaSinkPoolProxyPrivate CoremediaSinkPoolProxyPrivate;

struct _CoremediaSinkPoolProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  CoremediaSinkPoolProxyPrivate *priv;
};

struct _CoremediaSinkPoolProxyClass
{
  GDBusProxyClass parent_class;
};

GType coremedia_sink_pool_proxy_get_type (void) G_GNUC_CONST;

void coremedia_sink_pool_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSinkPool *coremedia_sink_pool_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSinkPool *coremedia_sink_pool_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void coremedia_sink_pool_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSinkPool *coremedia_sink_pool_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSinkPool *coremedia_sink_pool_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define COREMEDIA_TYPE_SINK_POOL_SKELETON (coremedia_sink_pool_skeleton_get_type ())
#define COREMEDIA_SINK_POOL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SINK_POOL_SKELETON, CoremediaSinkPoolSkeleton))
#define COREMEDIA_SINK_POOL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SINK_POOL_SKELETON, CoremediaSinkPoolSkeletonClass))
#define COREMEDIA_SINK_POOL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SINK_POOL_SKELETON, CoremediaSinkPoolSkeletonClass))
#define COREMEDIA_IS_SINK_POOL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SINK_POOL_SKELETON))
#define COREMEDIA_IS_SINK_POOL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SINK_POOL_SKELETON))

typedef struct _CoremediaSinkPoolSkeleton CoremediaSinkPoolSkeleton;
typedef struct _CoremediaSinkPoolSkeletonClass CoremediaSinkPoolSkeletonClass;
typedef struct _CoremediaSinkPoolSkeletonPrivate CoremediaSinkPoolSkeletonPrivate;

struct _CoremediaSinkPoolSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  CoremediaSinkPoolSkeletonPrivate *priv;
};

struct _CoremediaSinkPoolSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType coremedia_sink_pool_skeleton_get_type (void) G_GNUC_CONST;

CoremediaSinkPool *coremedia_sink_pool_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.halkamalka.Coremedia.ObjectManager.Source */

#define COREMEDIA_TYPE_SOURCE (coremedia_source_get_type ())
#define COREMEDIA_SOURCE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SOURCE, CoremediaSource))
#define COREMEDIA_IS_SOURCE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SOURCE))
#define COREMEDIA_SOURCE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), COREMEDIA_TYPE_SOURCE, CoremediaSourceIface))

struct _CoremediaSource;
typedef struct _CoremediaSource CoremediaSource;
typedef struct _CoremediaSourceIface CoremediaSourceIface;

struct _CoremediaSourceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_prepare) (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_release_pid_channel) (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_pidChannelHandle);

  gboolean (*handle_request_pid_channel) (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_pid);

  gboolean (*handle_start) (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_data_source) (CoremediaSource *object);

  const gchar * (*get_status) (CoremediaSource *object);

};

GType coremedia_source_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *coremedia_source_interface_info (void);
guint coremedia_source_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void coremedia_source_complete_prepare (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);

void coremedia_source_complete_start (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);

void coremedia_source_complete_stop (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);

void coremedia_source_complete_request_pid_channel (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation,
    guint64 pidChannelHandle);

void coremedia_source_complete_release_pid_channel (
    CoremediaSource *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void coremedia_source_call_prepare (
    CoremediaSource *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_call_prepare_finish (
    CoremediaSource *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_call_prepare_sync (
    CoremediaSource *proxy,
    GCancellable *cancellable,
    GError **error);

void coremedia_source_call_start (
    CoremediaSource *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_call_start_finish (
    CoremediaSource *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_call_start_sync (
    CoremediaSource *proxy,
    GCancellable *cancellable,
    GError **error);

void coremedia_source_call_stop (
    CoremediaSource *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_call_stop_finish (
    CoremediaSource *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_call_stop_sync (
    CoremediaSource *proxy,
    GCancellable *cancellable,
    GError **error);

void coremedia_source_call_request_pid_channel (
    CoremediaSource *proxy,
    guint16 arg_pid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_call_request_pid_channel_finish (
    CoremediaSource *proxy,
    guint64 *out_pidChannelHandle,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_call_request_pid_channel_sync (
    CoremediaSource *proxy,
    guint16 arg_pid,
    guint64 *out_pidChannelHandle,
    GCancellable *cancellable,
    GError **error);

void coremedia_source_call_release_pid_channel (
    CoremediaSource *proxy,
    guint64 arg_pidChannelHandle,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_source_call_release_pid_channel_finish (
    CoremediaSource *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_source_call_release_pid_channel_sync (
    CoremediaSource *proxy,
    guint64 arg_pidChannelHandle,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *coremedia_source_get_status (CoremediaSource *object);
gchar *coremedia_source_dup_status (CoremediaSource *object);
void coremedia_source_set_status (CoremediaSource *object, const gchar *value);

const gchar *coremedia_source_get_data_source (CoremediaSource *object);
gchar *coremedia_source_dup_data_source (CoremediaSource *object);
void coremedia_source_set_data_source (CoremediaSource *object, const gchar *value);


/* ---- */

#define COREMEDIA_TYPE_SOURCE_PROXY (coremedia_source_proxy_get_type ())
#define COREMEDIA_SOURCE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SOURCE_PROXY, CoremediaSourceProxy))
#define COREMEDIA_SOURCE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SOURCE_PROXY, CoremediaSourceProxyClass))
#define COREMEDIA_SOURCE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SOURCE_PROXY, CoremediaSourceProxyClass))
#define COREMEDIA_IS_SOURCE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SOURCE_PROXY))
#define COREMEDIA_IS_SOURCE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SOURCE_PROXY))

typedef struct _CoremediaSourceProxy CoremediaSourceProxy;
typedef struct _CoremediaSourceProxyClass CoremediaSourceProxyClass;
typedef struct _CoremediaSourceProxyPrivate CoremediaSourceProxyPrivate;

struct _CoremediaSourceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  CoremediaSourceProxyPrivate *priv;
};

struct _CoremediaSourceProxyClass
{
  GDBusProxyClass parent_class;
};

GType coremedia_source_proxy_get_type (void) G_GNUC_CONST;

void coremedia_source_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSource *coremedia_source_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSource *coremedia_source_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void coremedia_source_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSource *coremedia_source_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSource *coremedia_source_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define COREMEDIA_TYPE_SOURCE_SKELETON (coremedia_source_skeleton_get_type ())
#define COREMEDIA_SOURCE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SOURCE_SKELETON, CoremediaSourceSkeleton))
#define COREMEDIA_SOURCE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SOURCE_SKELETON, CoremediaSourceSkeletonClass))
#define COREMEDIA_SOURCE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SOURCE_SKELETON, CoremediaSourceSkeletonClass))
#define COREMEDIA_IS_SOURCE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SOURCE_SKELETON))
#define COREMEDIA_IS_SOURCE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SOURCE_SKELETON))

typedef struct _CoremediaSourceSkeleton CoremediaSourceSkeleton;
typedef struct _CoremediaSourceSkeletonClass CoremediaSourceSkeletonClass;
typedef struct _CoremediaSourceSkeletonPrivate CoremediaSourceSkeletonPrivate;

struct _CoremediaSourceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  CoremediaSourceSkeletonPrivate *priv;
};

struct _CoremediaSourceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType coremedia_source_skeleton_get_type (void) G_GNUC_CONST;

CoremediaSource *coremedia_source_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.halkamalka.Coremedia.ObjectManager.Sink */

#define COREMEDIA_TYPE_SINK (coremedia_sink_get_type ())
#define COREMEDIA_SINK(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SINK, CoremediaSink))
#define COREMEDIA_IS_SINK(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SINK))
#define COREMEDIA_SINK_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), COREMEDIA_TYPE_SINK, CoremediaSinkIface))

struct _CoremediaSink;
typedef struct _CoremediaSink CoremediaSink;
typedef struct _CoremediaSinkIface CoremediaSinkIface;

struct _CoremediaSinkIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_prepare) (
    CoremediaSink *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_start) (
    CoremediaSink *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    CoremediaSink *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_data_sink) (CoremediaSink *object);

  const gchar * (*get_status) (CoremediaSink *object);

};

GType coremedia_sink_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *coremedia_sink_interface_info (void);
guint coremedia_sink_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void coremedia_sink_complete_prepare (
    CoremediaSink *object,
    GDBusMethodInvocation *invocation);

void coremedia_sink_complete_start (
    CoremediaSink *object,
    GDBusMethodInvocation *invocation);

void coremedia_sink_complete_stop (
    CoremediaSink *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void coremedia_sink_call_prepare (
    CoremediaSink *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_sink_call_prepare_finish (
    CoremediaSink *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_sink_call_prepare_sync (
    CoremediaSink *proxy,
    GCancellable *cancellable,
    GError **error);

void coremedia_sink_call_start (
    CoremediaSink *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_sink_call_start_finish (
    CoremediaSink *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_sink_call_start_sync (
    CoremediaSink *proxy,
    GCancellable *cancellable,
    GError **error);

void coremedia_sink_call_stop (
    CoremediaSink *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean coremedia_sink_call_stop_finish (
    CoremediaSink *proxy,
    GAsyncResult *res,
    GError **error);

gboolean coremedia_sink_call_stop_sync (
    CoremediaSink *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *coremedia_sink_get_status (CoremediaSink *object);
gchar *coremedia_sink_dup_status (CoremediaSink *object);
void coremedia_sink_set_status (CoremediaSink *object, const gchar *value);

const gchar *coremedia_sink_get_data_sink (CoremediaSink *object);
gchar *coremedia_sink_dup_data_sink (CoremediaSink *object);
void coremedia_sink_set_data_sink (CoremediaSink *object, const gchar *value);


/* ---- */

#define COREMEDIA_TYPE_SINK_PROXY (coremedia_sink_proxy_get_type ())
#define COREMEDIA_SINK_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SINK_PROXY, CoremediaSinkProxy))
#define COREMEDIA_SINK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SINK_PROXY, CoremediaSinkProxyClass))
#define COREMEDIA_SINK_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SINK_PROXY, CoremediaSinkProxyClass))
#define COREMEDIA_IS_SINK_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SINK_PROXY))
#define COREMEDIA_IS_SINK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SINK_PROXY))

typedef struct _CoremediaSinkProxy CoremediaSinkProxy;
typedef struct _CoremediaSinkProxyClass CoremediaSinkProxyClass;
typedef struct _CoremediaSinkProxyPrivate CoremediaSinkProxyPrivate;

struct _CoremediaSinkProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  CoremediaSinkProxyPrivate *priv;
};

struct _CoremediaSinkProxyClass
{
  GDBusProxyClass parent_class;
};

GType coremedia_sink_proxy_get_type (void) G_GNUC_CONST;

void coremedia_sink_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSink *coremedia_sink_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSink *coremedia_sink_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void coremedia_sink_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CoremediaSink *coremedia_sink_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
CoremediaSink *coremedia_sink_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define COREMEDIA_TYPE_SINK_SKELETON (coremedia_sink_skeleton_get_type ())
#define COREMEDIA_SINK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_SINK_SKELETON, CoremediaSinkSkeleton))
#define COREMEDIA_SINK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_SINK_SKELETON, CoremediaSinkSkeletonClass))
#define COREMEDIA_SINK_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_SINK_SKELETON, CoremediaSinkSkeletonClass))
#define COREMEDIA_IS_SINK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_SINK_SKELETON))
#define COREMEDIA_IS_SINK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_SINK_SKELETON))

typedef struct _CoremediaSinkSkeleton CoremediaSinkSkeleton;
typedef struct _CoremediaSinkSkeletonClass CoremediaSinkSkeletonClass;
typedef struct _CoremediaSinkSkeletonPrivate CoremediaSinkSkeletonPrivate;

struct _CoremediaSinkSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  CoremediaSinkSkeletonPrivate *priv;
};

struct _CoremediaSinkSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType coremedia_sink_skeleton_get_type (void) G_GNUC_CONST;

CoremediaSink *coremedia_sink_skeleton_new (void);


/* ---- */

#define COREMEDIA_TYPE_OBJECT (coremedia_object_get_type ())
#define COREMEDIA_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_OBJECT, CoremediaObject))
#define COREMEDIA_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_OBJECT))
#define COREMEDIA_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), COREMEDIA_TYPE_OBJECT, CoremediaObject))

struct _CoremediaObject;
typedef struct _CoremediaObject CoremediaObject;
typedef struct _CoremediaObjectIface CoremediaObjectIface;

struct _CoremediaObjectIface
{
  GTypeInterface parent_iface;
};

GType coremedia_object_get_type (void) G_GNUC_CONST;

CoremediaSourcePool *coremedia_object_get_source_pool (CoremediaObject *object);
CoremediaSinkPool *coremedia_object_get_sink_pool (CoremediaObject *object);
CoremediaSource *coremedia_object_get_source (CoremediaObject *object);
CoremediaSink *coremedia_object_get_sink (CoremediaObject *object);
CoremediaSourcePool *coremedia_object_peek_source_pool (CoremediaObject *object);
CoremediaSinkPool *coremedia_object_peek_sink_pool (CoremediaObject *object);
CoremediaSource *coremedia_object_peek_source (CoremediaObject *object);
CoremediaSink *coremedia_object_peek_sink (CoremediaObject *object);

#define COREMEDIA_TYPE_OBJECT_PROXY (coremedia_object_proxy_get_type ())
#define COREMEDIA_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_OBJECT_PROXY, CoremediaObjectProxy))
#define COREMEDIA_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_OBJECT_PROXY, CoremediaObjectProxyClass))
#define COREMEDIA_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_OBJECT_PROXY, CoremediaObjectProxyClass))
#define COREMEDIA_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_OBJECT_PROXY))
#define COREMEDIA_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_OBJECT_PROXY))

typedef struct _CoremediaObjectProxy CoremediaObjectProxy;
typedef struct _CoremediaObjectProxyClass CoremediaObjectProxyClass;
typedef struct _CoremediaObjectProxyPrivate CoremediaObjectProxyPrivate;

struct _CoremediaObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  CoremediaObjectProxyPrivate *priv;
};

struct _CoremediaObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType coremedia_object_proxy_get_type (void) G_GNUC_CONST;
CoremediaObjectProxy *coremedia_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define COREMEDIA_TYPE_OBJECT_SKELETON (coremedia_object_skeleton_get_type ())
#define COREMEDIA_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_OBJECT_SKELETON, CoremediaObjectSkeleton))
#define COREMEDIA_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_OBJECT_SKELETON, CoremediaObjectSkeletonClass))
#define COREMEDIA_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_OBJECT_SKELETON, CoremediaObjectSkeletonClass))
#define COREMEDIA_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_OBJECT_SKELETON))
#define COREMEDIA_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_OBJECT_SKELETON))

typedef struct _CoremediaObjectSkeleton CoremediaObjectSkeleton;
typedef struct _CoremediaObjectSkeletonClass CoremediaObjectSkeletonClass;
typedef struct _CoremediaObjectSkeletonPrivate CoremediaObjectSkeletonPrivate;

struct _CoremediaObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  CoremediaObjectSkeletonPrivate *priv;
};

struct _CoremediaObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType coremedia_object_skeleton_get_type (void) G_GNUC_CONST;
CoremediaObjectSkeleton *coremedia_object_skeleton_new (const gchar *object_path);
void coremedia_object_skeleton_set_source_pool (CoremediaObjectSkeleton *object, CoremediaSourcePool *interface_);
void coremedia_object_skeleton_set_sink_pool (CoremediaObjectSkeleton *object, CoremediaSinkPool *interface_);
void coremedia_object_skeleton_set_source (CoremediaObjectSkeleton *object, CoremediaSource *interface_);
void coremedia_object_skeleton_set_sink (CoremediaObjectSkeleton *object, CoremediaSink *interface_);

/* ---- */

#define COREMEDIA_TYPE_OBJECT_MANAGER_CLIENT (coremedia_object_manager_client_get_type ())
#define COREMEDIA_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), COREMEDIA_TYPE_OBJECT_MANAGER_CLIENT, CoremediaObjectManagerClient))
#define COREMEDIA_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), COREMEDIA_TYPE_OBJECT_MANAGER_CLIENT, CoremediaObjectManagerClientClass))
#define COREMEDIA_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), COREMEDIA_TYPE_OBJECT_MANAGER_CLIENT, CoremediaObjectManagerClientClass))
#define COREMEDIA_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), COREMEDIA_TYPE_OBJECT_MANAGER_CLIENT))
#define COREMEDIA_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), COREMEDIA_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _CoremediaObjectManagerClient CoremediaObjectManagerClient;
typedef struct _CoremediaObjectManagerClientClass CoremediaObjectManagerClientClass;
typedef struct _CoremediaObjectManagerClientPrivate CoremediaObjectManagerClientPrivate;

struct _CoremediaObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  CoremediaObjectManagerClientPrivate *priv;
};

struct _CoremediaObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType coremedia_object_manager_client_get_type (void) G_GNUC_CONST;

GType coremedia_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void coremedia_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *coremedia_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *coremedia_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void coremedia_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *coremedia_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *coremedia_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __GDBUS_COREMEDIA_GENERATED_H__ */
